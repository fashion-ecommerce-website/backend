name: CI/CD Pipeline - Fit Backend

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

env:
  DOCKER_IMAGE_NAME: thinhnd24/fit-backend
  REGISTRY: docker.io

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn clean test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Docker image for local testing
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Test Docker image locally
        run: |
          # Start required services
          docker run -d --name postgres-test -e POSTGRES_DB=fit_db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:17-alpine
          docker run -d --name redis-test -p 6379:6379 redis:7
          
          # Wait for services to be ready
          sleep 10
          
          # Test the application image
          docker run -d --name app-test \
            --link postgres-test:postgres \
            --link redis-test:redis \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fit_db \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=postgres \
            -e SPRING_DATA_REDIS_HOST=redis \
            -e SPRING_DATA_REDIS_PORT=6379 \
            -e APP_JWT_SECRET=8g884e7VfB5CLneukGSmREnYowm6jyvTsBmcbAXm2UgBituYoBVcC1FEISw0439o/FZseqhXJRGxuzWO7X4ogw== \
            -p 8080:8080 \
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for app to start
          sleep 30
          
          # Health check
          curl -f http://localhost:8080/actuator/health || exit 1
          
          # Cleanup
          docker stop app-test postgres-test redis-test
          docker rm app-test postgres-test redis-test

      - name: Deploy to Render (if main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST "https://api.render.com/deploy/srv-d045p0adbo4c73e9iv9g?key=${{ secrets.RENDER_DEPLOY_KEY }}"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
